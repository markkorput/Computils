#pragma kernel CSApplyForcesToPositions
#pragma kernel CSApplyForcesToVelocities
// #pragma target 4.0

#define thread_group_size_x 4
#define thread_group_size_y 4

struct Position
{
    float3 pos;
};

struct Force
{
    float3 force;
};

RWStructuredBuffer<Position> positions_buf;
RWStructuredBuffer<Force> forces_buf;
RWStructuredBuffer<float3> velocities_buf;
RWStructuredBuffer<float> factors_buf;

int ResolutionX;
float DeltaTime;
bool UseFactors;

[numthreads (thread_group_size_x, thread_group_size_y, 1)]
void CSApplyForcesToPositions(uint3 id : SV_DispatchThreadID)
{
    const uint idx = id.x + id.y * ResolutionX;
    float3 delta = forces_buf[idx].force * DeltaTime;
    if (UseFactors) delta *= factors_buf[idx];
    positions_buf[idx].pos += delta;
}

[numthreads (thread_group_size_x, thread_group_size_y, 1)]
void CSApplyForcesToVelocities(uint3 id : SV_DispatchThreadID)
{
    const uint idx = id.x + id.y * ResolutionX;

    float3 force = forces_buf[idx].force;
    if (UseFactors) force *= factors_buf[idx];

    float3 velocity = velocities_buf[idx];
    velocity += force * DeltaTime;
    velocities_buf[idx] = velocity;

    float3 delta = velocity * DeltaTime;
    positions_buf[idx].pos += delta;
}