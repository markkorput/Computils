#pragma kernel CSTargets

// #pragma target 4.0

#define thread_group_size_x 4
#define thread_group_size_y 4

struct Position
{
    float3 pos;
};

struct Force
{
    float3 force;
};

RWStructuredBuffer<Position> positions_buf;
RWStructuredBuffer<Position> targets_buf;
RWStructuredBuffer<Force> forces_buf;

float4x4 TargetsToWorldMatrix;
int PositionsCount;
float Strength;
bool Additive;
int ResolutionX;
float MinDistance;
float ZeroDistance;

[numthreads (thread_group_size_x, thread_group_size_y, 1)]
void CSTargets(uint3 id : SV_DispatchThreadID)
{
    const uint forceidx = id.x + id.y * ResolutionX;
    if (forceidx >= (uint)PositionsCount) return;

    float3 pos = positions_buf[forceidx].pos;
    // get target local position
    float4 target = float4(targets_buf[forceidx].pos, 1);
    // convert to world position
    target = mul(TargetsToWorldMatrix, target);

    float3 delta = target.xyz - pos;
    float dist = length(delta);

    float3 forceDir;
    if (dist < MinDistance) {
        forceDir = delta; //normalize(randPos(pos + id));
    } else {
        forceDir = normalize(delta);
    }

    float strengthFactor = Strength;

    if (ZeroDistance > 0.0) {
        strengthFactor -= strengthFactor * min(dist / ZeroDistance, 1.0);
    }

    float3 force = forceDir * strengthFactor;

    if (Additive) force += forces_buf[forceidx].force;
    forces_buf[forceidx].force = force;
}